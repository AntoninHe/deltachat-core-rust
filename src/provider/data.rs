// file generated by src/provider/update.py

use crate::provider::*;
use crate::provider::Protocol::*;
use crate::provider::Socket::*;
use crate::provider::UsernamePattern::*;
use std::collections::HashMap;

lazy_static::lazy_static! {

    // aktivix.org.md: aktivix.org
    static ref P1: Provider = Provider {
        status: Status::OK,
        before_login_hint: "",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/aktivix-org",
        server: vec![
            Server { protocol: IMAP, socket: STARTTLS, hostname: "newyear.aktivix.org", port: 143, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "newyear.aktivix.org", port: 25, username_pattern: EMAIL },
        ],
    };

    // example.com.md: example.com, example.org
    static ref P2: Provider = Provider {
        status: Status::BROKEN,
        before_login_hint: "Hush this provider doesn't exist!",
        after_login_hint: "This provider doesn't really exist, so you can't use it :/ If you need an email provider for Delta Chat, take a look at providers.delta.chat!",
        overview_page: "https://providers.delta.chat/example-com",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.example.com", port: 1337, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "smtp.example.com", port: 1337, username_pattern: EMAIL },
        ],
    };

    // gmail.md: gmail.com, googlemail.com
    static ref P3: Provider = Provider {
        status: Status::PREPARATION,
        before_login_hint: "For Gmail accounts, you need to create an app-password if you have \"2-Step Verification\" enabled. If this setting is not available, you need to enable \"less secure apps\".",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/gmail",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.gmail.com", port: 993, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: SSL, hostname: "smtp.gmail.com", port: 465, username_pattern: EMAIL },
        ],
    };

    // gmx.net.md: gmx.net, gmx.de, gmx.at, gmx.ch, gmx.org, gmx.eu, gmx.info, gmx.biz, gmx.com
    static ref P4: Provider = Provider {
        status: Status::PREPARATION,
        before_login_hint: "You must allow IMAP access to your account before you can login.",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/gmx-net",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.gmx.net", port: 993, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: SSL, hostname: "mail.gmx.net", port: 465, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "mail.gmx.net", port: 587, username_pattern: EMAIL },
        ],
    };

    // hotmail.md: hotmail.com, outlook.com, office365.com, outlook.com.tr
    static ref P5: Provider = Provider {
        status: Status::BROKEN,
        before_login_hint: "Outlook email addresses will not work as expected as these servers remove some important transport information. Hopefully sooner or later there will be a fix, for now we suggest to use another email address.",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/hotmail",
        server: vec![
        ],
    };

    // icloud.md: icloud.com, me.com, mac.com
    static ref P6: Provider = Provider {
        status: Status::PREPARATION,
        before_login_hint: "You must create an app-specific password for Delta Chat before you can login.",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/icloud",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.mail.me.com", port: 993, username_pattern: EMAILLOCALPART },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "smtp.mail.me.com", port: 587, username_pattern: EMAIL },
        ],
    };

    // nauta.cu.md: nauta.cu
    static ref P7: Provider = Provider {
        status: Status::OK,
        before_login_hint: "",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/nauta-cu",
        server: vec![
            Server { protocol: IMAP, socket: STARTTLS, hostname: "imap.nauta.cu", port: 143, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "smtp.nauta.cu", port: 25, username_pattern: EMAIL },
        ],
    };

    // web.de.md: web.de, email.de, flirt.ms, hallo.ms, kuss.ms, love.ms, magic.ms, singles.ms, cool.ms, kanzler.ms, okay.ms, party.ms, pop.ms, stars.ms, techno.ms, clever.ms, deutschland.ms, genial.ms, ich.ms, online.ms, smart.ms, wichtig.ms, action.ms, fussball.ms, joker.ms, planet.ms, power.ms
    static ref P8: Provider = Provider {
        status: Status::PREPARATION,
        before_login_hint: "You must allow IMAP access to your account before you can login.",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/web-de",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.web.de", port: 993, username_pattern: EMAILLOCALPART },
            Server { protocol: IMAP, socket: STARTTLS, hostname: "imap.web.de", port: 143, username_pattern: EMAILLOCALPART },
            Server { protocol: SMTP, socket: STARTTLS, hostname: "smtp.web.de", port: 587, username_pattern: EMAILLOCALPART },
        ],
    };

    // yahoo.md: yahoo.com, yahoo.com, yahoo.de, yahoo.it, yahoo.fr, yahoo.es, yahoo.se, yahoo.co.uk, yahoo.co.nz, yahoo.com.au, yahoo.com.ar, yahoo.com.br, yahoo.com.mx, ymail.com, rocketmail.com, yahoodns.net
    static ref P9: Provider = Provider {
        status: Status::PREPARATION,
        before_login_hint: "",
        after_login_hint: "",
        overview_page: "https://providers.delta.chat/yahoo",
        server: vec![
            Server { protocol: IMAP, socket: SSL, hostname: "imap.mail.yahoo.com", port: 993, username_pattern: EMAIL },
            Server { protocol: SMTP, socket: SSL, hostname: "smtp.mail.yahoo.com", port: 465, username_pattern: EMAIL },
        ],
    };

    pub static ref PROVIDER_DATA: HashMap<&'static str, &'static Provider> = [
        ("aktivix.org", &*P1),
        ("example.com", &*P2),
        ("example.org", &*P2),
        ("gmail.com", &*P3),
        ("googlemail.com", &*P3),
        ("gmx.net", &*P4),
        ("gmx.de", &*P4),
        ("gmx.at", &*P4),
        ("gmx.ch", &*P4),
        ("gmx.org", &*P4),
        ("gmx.eu", &*P4),
        ("gmx.info", &*P4),
        ("gmx.biz", &*P4),
        ("gmx.com", &*P4),
        ("hotmail.com", &*P5),
        ("outlook.com", &*P5),
        ("office365.com", &*P5),
        ("outlook.com.tr", &*P5),
        ("icloud.com", &*P6),
        ("me.com", &*P6),
        ("mac.com", &*P6),
        ("nauta.cu", &*P7),
        ("web.de", &*P8),
        ("email.de", &*P8),
        ("flirt.ms", &*P8),
        ("hallo.ms", &*P8),
        ("kuss.ms", &*P8),
        ("love.ms", &*P8),
        ("magic.ms", &*P8),
        ("singles.ms", &*P8),
        ("cool.ms", &*P8),
        ("kanzler.ms", &*P8),
        ("okay.ms", &*P8),
        ("party.ms", &*P8),
        ("pop.ms", &*P8),
        ("stars.ms", &*P8),
        ("techno.ms", &*P8),
        ("clever.ms", &*P8),
        ("deutschland.ms", &*P8),
        ("genial.ms", &*P8),
        ("ich.ms", &*P8),
        ("online.ms", &*P8),
        ("smart.ms", &*P8),
        ("wichtig.ms", &*P8),
        ("action.ms", &*P8),
        ("fussball.ms", &*P8),
        ("joker.ms", &*P8),
        ("planet.ms", &*P8),
        ("power.ms", &*P8),
        ("yahoo.com", &*P9),
        ("yahoo.com", &*P9),
        ("yahoo.de", &*P9),
        ("yahoo.it", &*P9),
        ("yahoo.fr", &*P9),
        ("yahoo.es", &*P9),
        ("yahoo.se", &*P9),
        ("yahoo.co.uk", &*P9),
        ("yahoo.co.nz", &*P9),
        ("yahoo.com.au", &*P9),
        ("yahoo.com.ar", &*P9),
        ("yahoo.com.br", &*P9),
        ("yahoo.com.mx", &*P9),
        ("ymail.com", &*P9),
        ("rocketmail.com", &*P9),
        ("yahoodns.net", &*P9),
    ].iter().copied().collect();
}

